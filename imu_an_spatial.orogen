name "imu_an_spatial"
# Optionally declare the version number
version "0.1"

# If new data types need to be defined, they have to be put in a separate C++
# header, and this header will be loaded here
#import_types_from "imu_an_spatialTypes.hpp"
# Finally, it is pretty common that headers are directly loaded from an external
# library. In this case, the library must be first used (the name is the
# library's pkg-config name) and then the header can be used. Following Rock
# conventions, a common use-case would be:
#
using_library "imu_an_spatial"
import_types_from "gps_base"

# import_types_from "imu_an_spatial/CustomType.hpp"

# If this project uses data types that are defined in other oroGen projects,
# these projects should be imported there as well.
import_types_from "base"

# Declare a new task context (i.e., a component)
#
# The corresponding C++ class can be edited in tasks/Task.hpp and
# tasks/Task.cpp, and will be put in the imu_an_spatial namespace.
task_context "Task" do
    # This is the default from now on, and should not be removed. Rock will
    # transition to a setup where all components use a configuration step.
    needs_configuration

    # A configuration property (here, a std::string). Its value can be retrieved
    # in the C++ code with # _config_value.get() and _config_value.set(new_value).
    property("port", "/std/string").doc 'Port the device is connected to'
    property("baudrate", "int", 115200).doc 'Serial device baudrate'
    property("sourceFrame", "/std/string").doc 'IMU pose source frame'
    property("targetFrame", "/std/string").doc 'IMU pose target frame'
    property("NED2NWU", "bool", true).
        doc 'Switch IMU axis convention from NED(Advanced Navigation default) to NWU(Rock default)' 
    property("local_cartesian_origin", "base/Vector3d").doc("Origin of local cartesion coordinate system in lat/lon/height")
    property("external_velocity_std_dev", "float", 0.001)

    #Input of external velocity. e.g. odometry in robot frame
    input_port "external_velocity_in", "/base/samples/RigidBodyState"

    output_port "imu_samples", "base/samples/IMUSensors"
    output_port "imu_pose", "base/samples/RigidBodyState"
    output_port "gps_solution", "/gps_base/Solution"

    # If you want that component's updateHook() to be executed when the "input"
    # port gets data, uncomment this and comment the 'periodic' line
    # port_driven "input"
    # By default, the task will be periodic with a period of 0.1
    #periodic 0.1
    fd_driven
end

